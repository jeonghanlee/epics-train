program sncExample

%% #define FILLING 1
%% #define HEATINGPHASE1 2
%% #define HOLDING 3
%% #define HEATINGPHASE2 4
%% #define TRANSFERRING 5

%% #define HOLDTIME 30

double systemEnable;
assign systemEnable to "{S}:systemEnable";
monitor systemEnable;

short pause;
assign pause to "{S}:pause";
monitor pause;

double fillTimeout;
assign fillTimeout to "{S}:fillTimeout";
monitor fillTimeout;

double emptyTimeout;
assign emptyTimeout to "{S}:emptyTimeout";
monitor emptyTimeout;

double heatTimeout;
assign heatTimeout to "{S}:heatTimeout";
monitor heatTimeout;

double initialTimeout;
assign initialTimeout to "{S}:initialTimeout";
monitor initialTimeout;

double temp;
assign temp to "{S}:temp";
monitor temp;

double level;
assign level to "{S}:level";
monitor level;

short lowLev;
assign lowLev to "{S}:lowLevel";
monitor lowLev;

short highLev;
assign highLev to "{S}:highLevel";
monitor highLev;

short systemReset;
assign systemReset to "{S}:systemReset";
monitor systemReset;

short heaterCtl;
assign heaterCtl to "{S}:heater";

short impellerCtl;
assign impellerCtl to "{S}:impeller";

short inFlowCtl;
assign inFlowCtl to "{S}:inFlowPump";

short outFlowCtl;
assign outFlowCtl to "{S}:outFlowPump";

short faultLampCtl;
assign faultLampCtl to "{S}:faultLamp";

string stateName;
assign stateName to "{S}:state";

string faultMsg;
assign faultMsg to "{S}:faultMsg";

int curState;
int checkOk;
double count;
double holdCount;

ss ss1 {

  state init {

    entry {
      %% strcpy( seqg_var->stateName, "init" );
      pvPut( stateName, SYNC );
    }

    when (delay(10)) {
      //printf("sncExample: Startup\n");
    } state waitingForAllPvs

  }

  state waitingForAllPvs {

    entry {
      %% strcpy( seqg_var->stateName, "waitingForAllPvs" );
      pvPut( stateName, SYNC );
    }

    when ( pvConnectCount() == pvAssignCount() ) {
    } state initValues

    when ( delay(1) ) {
    } state waitingForAllPvs

  }

  state initValues {

    entry {

      %% strcpy( seqg_var->stateName, "initValues" );
      pvPut( stateName, SYNC );

      curState = 0;

    }

    when () {

      heaterCtl = 0;
      pvPut( heaterCtl, SYNC );

      impellerCtl = 0;
      pvPut( impellerCtl, SYNC );

      inFlowCtl = 0;
      pvPut( inFlowCtl, SYNC );

      outFlowCtl = 0;
      pvPut( outFlowCtl, SYNC );

      faultLampCtl = 0;
      pvPut( faultLampCtl, SYNC );

    } state initialCheck

  }

  state initialCheck {

    entry {

      %% strcpy( seqg_var->stateName, "initialCheck" );
      pvPut( stateName, SYNC );

      checkOk = 0;
      count = 0;

    }

    when ( checkOk ) {
      inFlowCtl = 1;
      pvPut( inFlowCtl, SYNC );
    } state filling

    when ( count > initialTimeout ) {
      %% strcpy( seqg_var->faultMsg, "initial check failed" );
      pvPut( faultMsg, SYNC );
    } state faulted

    when ( delay(1) ) {
      checkOk = 1;
      if ( temp > 99 ) checkOk = 0;
      if ( !lowLev ) checkOk = 0;
      if ( highLev ) checkOk = 0;
      if ( !systemEnable ) checkOk = 0;
      count++;
      printf( "system check failed %-g time(s)\n", count );
    } state initialCheck

  }

  state faulted {

    entry {

      %% strcpy( seqg_var->stateName, "faulted" );
      pvPut( stateName, SYNC );

      faultLampCtl = 1;
      pvPut( faultLampCtl, SYNC );

    }

    when ( systemReset ) {
      %% strcpy( seqg_var->faultMsg, "" );
      pvPut( faultMsg, SYNC );
      faultLampCtl = 0;
      pvPut( faultLampCtl, SYNC );
    } state initialCheck

    when ( delay(1) ) {
      printf( "faulted\n" );
    } state faulted

  }

  state filling {

    entry {

      %% strcpy( seqg_var->stateName, "filling" );
      pvPut( stateName, SYNC );

      count = 0;

      curState = FILLING;

    }

    when ( pause == 1 ) {
    } state pausing

    when ( count > fillTimeout ) {
      inFlowCtl = 0;
      pvPut( inFlowCtl, SYNC );
      %% strcpy( seqg_var->faultMsg, "fill timeout" );
      pvPut( faultMsg, SYNC );
    } state faulted

    when ( highLev ) {
      inFlowCtl = 0;
      pvPut( inFlowCtl, SYNC );
      heaterCtl = 1;
      pvPut( heaterCtl, SYNC );
      impellerCtl = 1;
      pvPut( impellerCtl, SYNC );
    } state heatingPhase1

    when ( delay(1) ) {
      printf( "filling, level = %-f, count = %-g\n", level, count );
      count++;
    } state filling

  }

  state heatingPhase1 {

    entry {

      %% strcpy( seqg_var->stateName, "heatingPhase1" );
      pvPut( stateName, SYNC );

      count = 0;

      curState = HEATINGPHASE1;

    }

    when ( pause == 1 ) {
    } state pausing

    when ( count > heatTimeout ) {
      heaterCtl = 0;
      pvPut( heaterCtl, SYNC );
      impellerCtl = 0;
      pvPut( impellerCtl, SYNC );
      %% strcpy( seqg_var->faultMsg, "heat 1 timeout" );
      pvPut( faultMsg, SYNC );
    } state faulted

    when ( temp >= 25 ) {
      heaterCtl = 0;
      pvPut( heaterCtl, SYNC );
      holdCount = 0;
    } state holding

    when ( delay(1) ) {
      printf( "heating phase 1, temp = %-f, count = %-g\n", temp, count );
      count++;
    } state heatingPhase1

  }

  state holding {

    entry {

      %% strcpy( seqg_var->stateName, "holding" );
      pvPut( stateName, SYNC );

      curState = HOLDING;

    }

    when ( pause == 1 ) {
    } state pausing

    when ( holdCount >= HOLDTIME ) {
      heaterCtl = 1;
      pvPut( heaterCtl, SYNC );
    } state heatingPhase2

    when ( delay(1) ) {
      printf( "holding, temp = %-f, count = %-g\n", temp, holdCount );
      holdCount++;
    } state holding

  }

  state heatingPhase2 {

    entry {

      %% strcpy( seqg_var->stateName, "heatingPhase2" );
      pvPut( stateName, SYNC );

      count = 0;

      curState = HEATINGPHASE2;

    }

    when ( pause == 1 ) {
    } state pausing

    when ( count > heatTimeout ) {
      heaterCtl = 0;
      pvPut( heaterCtl, SYNC );
      impellerCtl = 0;
      pvPut( impellerCtl, SYNC );
      %% strcpy( seqg_var->faultMsg, "heat 2 timeout" );
      pvPut( faultMsg, SYNC );
    } state faulted

    when ( temp >= 30 ) {
      heaterCtl = 0;
      pvPut( heaterCtl, SYNC );
      impellerCtl = 0;
      pvPut( impellerCtl, SYNC );
      outFlowCtl = 1;
      pvPut( outFlowCtl, SYNC );
    } state transferring

    when ( delay(1) ) {
      printf( "heating phase 2, temp = %-f, count = %-g\n", temp, count );
      count++;
    } state heatingPhase2

  }

  state transferring {

    entry {

      %% strcpy( seqg_var->stateName, "transferring" );
      pvPut( stateName, SYNC );

      count = 0;

      curState = TRANSFERRING;

    }

    when ( pause == 1 ) {
    } state pausing

    when ( count > emptyTimeout ) {
      outFlowCtl = 0;
      pvPut( outFlowCtl, SYNC );
      %% strcpy( seqg_var->faultMsg, "transfer timeout" );
      pvPut( faultMsg, SYNC );
    } state faulted

    when ( lowLev ) {
      outFlowCtl = 0;
      pvPut( outFlowCtl, SYNC );
      inFlowCtl = 1;
      pvPut( inFlowCtl, SYNC );
    } state filling

    when ( delay(1) ) {
      printf( "transferring, level = %-f, count = %-g\n", level, count );
      count++;
    } state transferring

  }

  state pausing {

    entry {

      %% strcpy( seqg_var->stateName, "pausing" );
      pvPut( stateName, SYNC );

      heaterCtl = 0;
      pvPut( heaterCtl, SYNC );

      impellerCtl = 0;
      pvPut( impellerCtl, SYNC );

      inFlowCtl = 0;
      pvPut( inFlowCtl, SYNC );

      outFlowCtl = 0;
      pvPut( outFlowCtl, SYNC );

    }

    when ( ( pause != 1 ) && ( curState == FILLING ) ) {
      inFlowCtl = 1;
      pvPut( inFlowCtl, SYNC );
    } state filling

    when ( ( pause != 1 ) && ( curState == HEATINGPHASE1 ) ) {
      heaterCtl = 1;
      pvPut( heaterCtl, SYNC );
      impellerCtl = 1;
      pvPut( impellerCtl, SYNC );
    } state heatingPhase1

    when ( ( pause != 1 ) && ( curState == HOLDING ) ) {
      impellerCtl = 1;
      pvPut( impellerCtl, SYNC );
    } state holding

    when ( ( pause != 1 ) && ( curState == HEATINGPHASE2 ) ) {
      heaterCtl = 1;
      pvPut( heaterCtl, SYNC );
      impellerCtl = 1;
      pvPut( impellerCtl, SYNC );
    } state heatingPhase2

    when ( ( pause != 1 ) && ( curState == TRANSFERRING ) ) {
      outFlowCtl = 1;
      pvPut( outFlowCtl, SYNC );
    } state transferring

    when ( delay(1) ) {
      printf( "pausing\n" );
    } state pausing

  }

}
